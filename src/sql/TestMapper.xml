<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sql.TestMapper">

    <!--首次登录-->
    <select id="sql511" resultType="java.lang.String">
        select
          player_id, min(event_date) as first_login
        from Activity
        group by player_id;
    </select>

    <select id="sql512" resultType="java.lang.String">
        select
          player_id, device_id
        from Activity
        where (player_id, event_date) in
        (
            select
                player_id, min(event_date)
            from Activity
            group by player_id
        );
    </select>

    <select id="sql534" resultType="java.lang.String">
        select
            t1.player_id, t1.event_date, sum(t2.games_played) as games_played_so_far
        from Activity as t1, Activity as t2
        where
            t1.player_id = t2.player_id and t1.event_date >= t2.event_date
        group by t1.player_id, t1.event_date;
    </select>

    <select id="sql550" resultType="java.lang.String">
        select
            round(t1.count / count(distinct t2.player_id), 2) as fraction
        from
        (
            # 查询首次登录后第二天登录的玩家数量
            select
                count(t1.player_id) as count
            from
            Activity as t1,
            (
                # 查询第一次登录时间
                select
                  player_id, min(event_date) as first_login
                from Activity
                group by player_id
            ) as t2
            where t1.player_id = t2.player_id and t1.event_date - t2.first_login = 1
        ) as t1,
        Activity as t2
    </select>

    <select id="sql550_2" resultType="java.lang.String">
        select
            ifnull(round(count(player_id) / (select count(distinct player_id) from Activity), 2), 0) as fraction
        from Activity
        where (player_id, event_date) in
        (
            select
                player_id, date(min(event_date) + 1)
            from Activity
            group by player_id
        )
    </select>

    <!--左连接-->
    <select id="sql550_3" resultType="java.lang.String">
        select
            round(avg(t2.event_date is not null), 2) as fraction
        from
        (
            <!--首次登录-->
            select
                player_id, min(event_date) as first_login
            from Activity
            group by player_id
        ) as t1
        left join Activity as t2
        on t1.player_id = t2.player_id and datediff(t2.event_date, t1.first_login) = 1
    </select>

    <select id="sql570_1" resultType="java.lang.String">
        select
          e1.name
        from
          Employee as e1,
          (select
              managerId
           from
              Employee
           group by
              managerId
           having count(managerId) >= 5
          ) as e2
        where e1.id = e2.managerId
    </select>

    <select id="sql574_1" resultType="java.lang.String">
        select
            c.name
        from
        Candidate as c,
        (
            select
                candidateId
            from
                Vote
            group by
                candidateId
            order by
                count(id) desc
            limit 1
        ) as v
        where
            c.id = v.candidateId
    </select>

    <select id="sql577_1" resultType="java.lang.String">
        select
          e.name as 'name',
          b.bonus as bonus
        from
          Employee as e
        left join
          Bonus as b
        on
          e.empId = b.empId
        where
          b.bonus is null or b.bonus < 1000
    </select>

    <select id="sql578_1" resultType="java.lang.String">
        select
            s1.question_id as survey_log
        from
            (
                select
                    question_id,
                    count(question_id) as answer_cnt
                from
                    SurveyLog
                where
                    action = 'answer'
                group by
                    question_id
            ) as s1
        left join
            (
                select
                    question_id,
                    count(question_id) as show_cnt
                from
                    SurveyLog
                where
                    action = 'show'
                group by
                    question_id
            ) as s2
        on
            s1.question_id = s2.question_id
        order by
            s1.answer_cnt / s2.show_cnt desc, s1.question_id asc
        limit 1
    </select>

    <select id="sql578_2" resultType="java.lang.String">
        select
            question_id as survey_log
        from
            (
                select
                    question_id,
                    sum(if(action = 'show', 1, 0)) as show_cnt,
                    sum(if(action = 'answer', 1, 0)) as answer_cnt
                from
                    SurveyLog
                group by
                    question_id
            ) as t1
        order by
            answer_cnt / show_cnt desc, question_id asc
        limit 1
    </select>

    <select id="sql578_3" resultType="java.lang.String">
        select
            question_id as survey_log
        from
            SurveyLog
        group by
            question_id
        order by
            sum(if(action = 'answer', 1, 0)) / sum(if(action = 'show', 1, 0)) desc,
            question_id asc
        limit 1
    </select>
</mapper>
